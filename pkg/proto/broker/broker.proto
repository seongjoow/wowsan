syntax = "proto3";

package goServerTest;
option go_package = ".;goServerTest";


service BrokerService {
    rpc AddBroker(AddBrokerRequest) returns (AddBrokerResponse);
    rpc SendAdvertisement(SendMessageRequest) returns (SendMessageResponse);
    rpc SendPublication(SendMessageRequest) returns (SendMessageResponse);
    rpc SendSubscription(SendMessageRequest) returns (SendMessageResponse);
    rpc AddPublisher(AddClientRequest) returns (AddClientResponse);
    rpc AddSubscriber(AddClientRequest) returns (AddClientResponse);
    // rpc SendUnsubscription(SendUnsubscriptionRequest) returns (Response);
}


message AddBrokerRequest {
    string id = 1;
    string ip = 2;
    string port = 3;
}

message AddBrokerResponse {
    string id = 1;
    string ip = 2;
    string port = 3;
}


// common message structure
message SendMessageRequest {
    string id = 1;
    string ip = 2;
    string port = 3;
    string subject = 4;
    string operator = 5;
    string value = 6; 
    string nodeType = 7;
    int64 hopCount = 8;
    string messageId = 9;
    string senderId = 10; // 메시지 발생시킨 노드의 id
    // string senderIp = 3;
    repeated  PerformanceInfo performanceInfo = 11;
}

message PerformanceInfo {
    string brokerId = 1;
    string cpu = 2;
    string memory = 3;
    string queueLength = 4;
    string queueTime = 5;
    string serviceTime = 6;
    string responseTime = 7;
    string interArrivalTime = 8;
    string throughput = 9;
    string timestamp = 10;
}

message SendMessageResponse {
    string id = 1;
    string ip = 2;
    string port = 3;
    string message = 4;
    // bool success = 5;
}


message AddClientRequest {
    string id = 1;
    string ip = 2;
    string port = 3;
}

message AddClientResponse {
    string id = 1;
    string ip = 2;
    string port = 3;
}
